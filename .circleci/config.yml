version: 2.1

orbs:
  codecov: codecov/codecov@3.2.0
  jq: circleci/jq@2.2.0
  github-status: assurance-maladie-digital/github-status@1.1.0

commands:
  netlify-deploy:
    parameters:
      prod:
        type: boolean
        default: false
    steps:
      - run:
          name: Netlify Deploy
          command: |
            PULL_REQUEST_ID=`echo $CIRCLE_PULL_REQUEST | sed 's?.*/??'`

            API=https://api.github.com
            USER=$CIRCLE_PROJECT_USERNAME
            REPO=$CIRCLE_PROJECT_REPONAME
            SHA=$CIRCLE_SHA1

            URL=$API/repos/$USER/$REPO/commits/$SHA
            ACCEPT='Accept: application/vnd.github.v3+json'

            COMMIT_MESSAGE=$(curl -H "$ACCEPT" $URL | jq -r '.commit.message')

            args=(
              '--dir=packages/docs/dist'
              '--json'
            )
            [[ $CIRCLE_BRANCH == 'test-ci-documentation' ]] && args+=( '--alias="dev"' )
            [[ << parameters.prod >> == true ]] && args+=( '--prod' )

            args+=( "--message='$COMMIT_MESSAGE (#$PULL_REQUEST_ID))'" )

            NETLIFY_API_RESPONSE=$(./node_modules/.bin/netlify deploy "${args[@]}")
            echo $NETLIFY_API_RESPONSE

            NETLIFY_DEPLOY_URL=$(echo $NETLIFY_API_RESPONSE | jq -r '.deploy_url')
            echo "export TARGET_URL='$NETLIFY_DEPLOY_URL'" >> $BASH_ENV

defaults: &defaults
  working_directory: ~/project
  docker:
    - image: cimg/node:14.18-browsers

aliases:
  - &restore_cache
    name: Restore Yarn Package Cache
    key: yarn-packages-{{ checksum "yarn.lock" }}
  - &save_cache
    name: Save Yarn Package Cache
    key: yarn-packages-{{ checksum "yarn.lock" }}
    paths:
      - node_modules/
      - ~/.cache
  - &install
    name: Install Dependencies
    command: yarn install --frozen-lockfile --non-interactive
  - &build
    name: Build Packages
    command: yarn build && yarn generate && ls -l packages/docs
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
      CI: 'true'
      CIRCLE_NODE_TOTAL: '4'

jobs:
  install:
    <<: *defaults
    steps:
      - run: echo "export TARGET_URL='$CIRCLE_BUILD_URL'" >> $BASH_ENV
      - github-status/pending:
          context: circleci/integration
      - checkout
      - restore_cache: *restore_cache
      - run: *install
      - save_cache: *save_cache
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project
  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn lint
      - github-status/report_failed_only:
          context: circleci/integration
  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: yarn test
      - codecov/upload
      - github-status/report_failed_only:
          context: circleci/integration
  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: *build
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/packages/docs
      - github-status/report_failed_only:
          context: circleci/integration
  deploy-preview:
    <<: *defaults
    steps:
      - run: echo "export TARGET_URL='$CIRCLE_BUILD_URL'" >> $BASH_ENV
      - github-status/post_status:
          state: success
          context: circleci/integration
      - github-status/pending:
          context: circleci/deploy-preview
          description: Deploy Preview in progress
      - attach_workspace:
          at: ~/
      - netlify-deploy
      - github-status/report:
          context: circleci/deploy-preview
          description: Deploy Preview ready!
  deploy:
    <<: *defaults
    steps:
      - github-status/pending:
          context: circleci/deploy
          description: Deploy in progress
      - attach_workspace:
          at: ~/
      - netlify-deploy:
          prod: true
      - github-status/report:
          context: circleci/deploy
          description: Deploy ready!

workflows:
  integration:
    jobs:
      - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - install
      - build:
          requires:
            - install
      - deploy-preview:
          requires:
            - lint
            - test
            - build
      - hold_for_deploy:
          type: approval
          requires:
            - deploy-preview
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - hold_for_deploy
          filters:
            branches:
              only: main
